Entry Point
Every computer program has an entry point.
You can start writing your code directly into <script> tags. But this means it
will be executed instantly and simultaneously as the script is being downloaded
into the browser, without concern for DOM or other media.
This can create a problem because your code might be accessing DOM elements
before they are fully downloaded from the server.
To remedy the situation, you may want to wait until the DOM tree is fully available.


DOM :
DOM is  executing the logical tree structure of the html code of  the document .
DOM is an API.
API( communicating between two language).
It is done using JS .
DOM is used to manupilate the HTML element and attributes .

CONTENT LOADED :
The document as been loaded .
READY STATE :
It specifies the state of the document.
* loaded
* interactive
* loading 

loaded - The document as been loaded
interactive - The subresources are not loaded
loading  - The document is loading.

Diff between ready state and windows onload :
ready state :
It will be executed when the html code loads ,it will never wait for the subresources to load .
windows state :
It will wait for the whole resources to load .

EVENT LISTENER :
The addEventListener() method attaches an event handler to the specified element.
element.addEventListener(event, function, useCapture);

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript addEventListener()</h2>

<p>This example uses the addEventListener() method to attach a click event to a button.</p>

<button id="myBtn">Try it</button>

<script>
document.getElementById("myBtn").addEventListener("click", function() {
  alert("Hello World!");
});
</script>

</body>
</html>


including external scripte :
<script src="file name"></script>


Including external script :
 including an js file  externally in html.
 <script src="file name"><script>


import and export :
importing an js file and accessing the variable and object etc.. 

exporting an js file into another file is export .

Dynamic Import :
The file will be loaded in the web page and when the fuction is done the content will be viwed , it will be waiting for the fuction to be done.

<!doctype html>
<script>
  async function load() {
    let say = await import('./say.js');
    say.hi(); // Hello!
    say.bye(); // Bye!
    say.default(); // Module loaded (export default)!
  }
</script>
<button onclick="load()">Click me</button>






